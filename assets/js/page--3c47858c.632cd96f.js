(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{531:function(t,a,s){t.exports=s.p+"assets/img/v2-a992d2e50fc353edb9027683bf62ee2b_r.af8b2557.jpg"},532:function(t,a,s){t.exports=s.p+"assets/img/v2-5004d1364ef68f4d71a730f719570dcd_720w.5004d136.jpg"},705:function(t,a,s){"use strict";s.r(a);var e=s(1),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("https://www.cnblogs.com/xrq730/p/7048693.html")]),t._v(" "),e("p",[t._v("Lock 前缀的具体用法")]),t._v(" "),e("p",[t._v("https://mp.weixin.qq.com/s/sSQqHpO85IBLsiBb8kh8AQ")]),t._v(" "),e("h2",{attrs:{id:"内存屏障"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内存屏障"}},[t._v("#")]),t._v(" 内存屏障")]),t._v(" "),e("p",[t._v("插入一个内存屏障，相当于告诉CPU和编译器先于这个命令的必须先执行，后于这个命令的必须后执行。")]),t._v(" "),e("p",[t._v("内存屏障另一个作用是强制更新一次不同 CPU 的缓存。例如，一个写屏障会把这个屏障前写入的数据刷新到缓存，这样任何试图读取该数据的线程将得到最新值，而不用考虑到底是被哪个 cpu 核心或者哪颗 CPU 执行的。")]),t._v(" "),e("p",[t._v("为了保证内存的可见性，java 编译器在生成指令序列的适当位置会插入内存屏障指令来禁止特定类型的处理器重排。JMM 把内存屏障指令分为下列四类：")]),t._v(" "),e("p",[e("img",{attrs:{src:s(531),alt:"preview",loading:"lazy"}})]),t._v(" "),e("p",[t._v("SotreLoad 是一个全能型的屏障，他同时具有其他三个屏障的效果。")]),t._v(" "),e("h5",{attrs:{id:"cpu-层面内存屏障"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cpu-层面内存屏障"}},[t._v("#")]),t._v(" cpu 层面内存屏障:")]),t._v(" "),e("ul",[e("li",[t._v("写屏障 Store Memory Barrier(a.k.a. ST, SMB, smp_wmb)是一条告诉处理器在执行这之后的指令之前，应用所有已经在存储缓存（store buffer）中的保存的指令。")]),t._v(" "),e("li",[t._v("读屏障 Load Memory Barrier (a.k.a. LD, RMB, smp_rmb)是一条告诉处理器在执行任何的加载前，先应用所有已经在失效队列中的失效操作的指令。")])]),t._v(" "),e("h2",{attrs:{id:"介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),e("p",[t._v("volatile 主要两个特性，可见性和有序性。")]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v("可见性是使用 lock 前缀实现，lock 前缀可实现嗅探机制，每个处理器都会有一个嗅探机制，去看自己的工作内存中的数值与主内存中那个的是否一致，不一致，会将自己的工作内存中的数值设置成无效，同时会从主内存中读取数值更新到自己的工作内存中。")]),t._v(" "),e("li",[t._v("有序性是通过内存屏障，禁止指令重排，内存屏障还可以强制刷出各种 CPU 的缓存数据保证可见性")])])]),t._v(" "),e("p",[t._v("volatile 的内存屏障 -> LOCK 近似为内存屏障 -> 原理是锁缓存 -> 读写屏障(就是 store buffer/失效队列)")]),t._v(" "),e("h2",{attrs:{id:"volatile-内存语义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#volatile-内存语义"}},[t._v("#")]),t._v(" volatile 内存语义")]),t._v(" "),e("h4",{attrs:{id:"volatile-写的内存语义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#volatile-写的内存语义"}},[t._v("#")]),t._v(" volatile 写的内存语义")]),t._v(" "),e("p",[t._v("当写一个 volatile 变量时，JMM 会把该线程对应的缓存中的变量值刷新到主内存。")]),t._v(" "),e("h4",{attrs:{id:"volatile-读的内存语义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#volatile-读的内存语义"}},[t._v("#")]),t._v(" volatile 读的内存语义")]),t._v(" "),e("p",[t._v("当读一个 volatile 变量时，JMM 会把该线程对应的缓存置为无效。线程接下来将从主内存中读取共享变量。")]),t._v(" "),e("h2",{attrs:{id:"volatile-内存语义的实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#volatile-内存语义的实现"}},[t._v("#")]),t._v(" volatile 内存语义的实现")]),t._v(" "),e("p",[t._v("为了实现 volatile 内存语义（即内存可见性），JMM 会限制特定类型的编译器和处理器重排序。为此，JMM 针对编译器制定了 volatile 重排序规则表，如下所示：")]),t._v(" "),e("p",[e("img",{attrs:{src:s(532),alt:"img",loading:"lazy"}})]),t._v(" "),e("p",[t._v("使用 volatile 修饰变量时，根据 volatile 重排序规则表，Java 编译器在生成字节码时，会在指令序列中插入内存屏障指令来禁止特定类型的处理器重排序。")]),t._v(" "),e("h3",{attrs:{id:"volatile-写操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#volatile-写操作"}},[t._v("#")]),t._v(" volatile 写操作")]),t._v(" "),e("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/8KKrHK5ic6XAJq0GoNog70w9POicKfKJYRZsaepBgoYIpAMu93vrlibW8NVAooOnbwvIf3qe40Oliae7Y8UM6fbibug/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),t._v(" "),e("p",[t._v("在每个 volatile 写操作的前后分别插入一个 StoreStore 屏障和一个 StoreLoad 屏障。")]),t._v(" "),e("p",[t._v("1、在 volatile 写之前，会保证所有之前发生的事已经发生，并且任何更新过的数据值也是可见的，因为内存屏障会把之前的写入值都刷新到缓存。（这里应该就是个写屏障）")]),t._v(" "),e("p",[t._v("2、在 volatile 写之后，会把这个 volatile 变量更改的值立即刷新到内存，在后续任何读写操作之前。也就是任何访问这个字段的线程将会得到最新的值。（这里应该就是个读屏障）")]),t._v(" "),e("h3",{attrs:{id:"volatile-读操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#volatile-读操作"}},[t._v("#")]),t._v(" volatile 读操作")]),t._v(" "),e("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/8KKrHK5ic6XAJq0GoNog70w9POicKfKJYR1qJQACm2ujyHhxzJ6kUfqHia70JjibsAgMHmWNyI5qeeKagmumXOohNQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),t._v(" "),e("p",[t._v("在每个 volatile 读操作的后面插入 LoadLoad 屏障和 LoadStore 屏障。")]),t._v(" "),e("h5",{attrs:{id:"代码示例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码示例"}},[t._v("#")]),t._v(" 代码示例：")]),t._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("VolatileBarrierExample")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" v1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" v2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("readAndWrite")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第一个volatile读")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第二个volatile读")]),t._v("\n        a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" j"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 普通写")]),t._v("\n        v1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第一个volatile写")]),t._v("\n        v2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" j "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第二个volatile写")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br")])]),e("p",[t._v("编译器生成执行过程")]),t._v(" "),e("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/8KKrHK5ic6XAJq0GoNog70w9POicKfKJYR0FItL9FRMv2yMd40uvKIibFmLWpC3v2Gl9H7lFD9mlGRvaSnBXcSB5Q/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),t._v(" "),e("p",[t._v("最后的StoreLoad屏障不能省略，因为编译器无法确定第二个volatile写后是否会有volatile读或写，保守起见，都会在该处加一个StoreLoad屏障。")]),t._v(" "),e("h2",{attrs:{id:"字节码层面分析-volitile"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字节码层面分析-volitile"}},[t._v("#")]),t._v(" 字节码层面分析 volitile")]),t._v(" "),e("p",[t._v("JVM中定义的内存屏障如下，JDK1.7的实现：")]),t._v(" "),e("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/8KKrHK5ic6XAJq0GoNog70w9POicKfKJYRBZicsfs7OeicpaKfKZ584KrnhiaLlOHyCroORYmHH4pFl7MouBNboGp1Q/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),t._v(" "),e("ul",[e("li",[t._v("loadload 屏障（load1，loadload， load2）")]),t._v(" "),e("li",[t._v("loadstore 屏障（load，loadstore， store）")])]),t._v(" "),e("p",[t._v("这两个屏障都通过 acquire() 方法实现：")]),t._v(" "),e("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/8KKrHK5ic6XAJq0GoNog70w9POicKfKJYRYd6FIJmhUnthHiciboqASQFpCcb3moBlj30y9jPOPwfZkZVBfTicTRg6Q/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),t._v(" "),e("p",[t._v("清空屏障之前的 load 操作，然后才能执行屏障之后的操作，可以保证 load 操作的数据在下个 store 指令之前准备好。")]),t._v(" "),e("p",[t._v("补充：")]),t._v(" "),e("p",[e("strong",[t._v("其中  _"),e("em",[t._v("asm")]),t._v("_，表示汇编代码的开始。")]),t._v("\nvolatile，c/c++中的 volatile 关键字，用来修饰变量，被  volatile 声明的变量表示随时可能发生变化，每次使用时，都必须从变量i对应的"),e("a",{attrs:{href:"https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[t._v("内存"),e("OutboundLink")],1),t._v('地址读取，编译器对操作该变量的代码不再进行优化。\n最后的"memory"是编译器屏障的作用。')]),t._v(" "),e("ul",[e("li",[t._v("storestore 屏障（store1，storestore， store2）")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdn.net/201810221520021?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20xNTUxNzk4NjQ1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70",alt:"在这里插入图片描述",loading:"lazy"}})]),t._v(" "),e("p",[t._v("清空屏障之前的 store 操作，然后才能执行屏障之后的 store 操作，保证 store1 写入的数据在执行 store2 时对其它 CPU 可见。")]),t._v(" "),e("ul",[e("li",[t._v("storeload 屏障（store，storeload， load）")])]),t._v(" "),e("p",[t._v("storeload屏障，完全由下面这些指令实现：")]),t._v(" "),e("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://img-blog.csdn.net/20181022152019520?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20xNTUxNzk4NjQ1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70",alt:"在这里插入图片描述"}}),t._v(" "),e("p",[t._v("通过 os::is_MP() 先判断是不是多核，如果只有一个CPU的话，就不存在这些问题了。")]),t._v(" "),e("p",[t._v("storeload屏障，完全由下面这些指令实现：")]),t._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[t._v("__asm__ "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lock; addl $0,0(%%rsp)"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cc"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"memory"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("lock 只是前缀，lock 后面一定有跟命令\t，具体看后面的命令。")]),t._v(" "),e("ul",[e("li",[t._v("volatile 的实现需要内存屏障，由于 lock 前缀的指令具有内存屏障的效果，这里的 lock addl $0x0,(%rsp) 是用来作内存屏障使用的。")])]),t._v(" "),e("p",[t._v("lock 指令的作用是：在执行 lock 后面指令时，会设置处理器的 LOCK# 信号（这个信号会锁定总线，阻止其它CPU通过总线访问内存，直到这些指令执行结束），这条指令的执行变成原子操作，之前的读写请求都不能越过  lock 指令进行重排，相当于一个内存屏障。")]),t._v(" "),e("p",[e("strong",[t._v("volatile和CAS底层实现都用CPU的lock指令，他们有什么不同？")])]),t._v(" "),e("ul",[e("li",[t._v("CAS 保证原子性，CAS的实现用了lock cmpxchg指令。cmpxchg指令涉及一次内存读和一次内存写，需要lock前缀保证中间不会有其它cpu写这段内存。")]),t._v(" "),e("li",[t._v("lock 只是前缀。cas 指定了  lock后面的指令必须是交换，volatile lock后面的指令要看编译时的实际情况。")]),t._v(" "),e("li",[t._v("CAS 给 cmpxchg 指令加 lock 前缀，是为了 cmpxchg 指令在多核处理器情况能保证原子性")])]),t._v(" "),e("p",[t._v("https://blog.csdn.net/m15517986455/article/details/83273723")]),t._v(" "),e("h2",{attrs:{id:"lock-前缀的具体作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lock-前缀的具体作用"}},[t._v("#")]),t._v(" "),e("strong",[t._v("lock 前缀的具体作用")])]),t._v(" "),e("ol",[e("li",[t._v("锁总线，其它CPU对内存的读写请求都会被阻塞，直到锁释放，不过实际后来的处理器都采用锁缓存替代锁总线，因为锁总线的开销比较大，锁总线期间其他CPU没法访问内存")]),t._v(" "),e("li",[t._v("lock 后的写操作会回写已修改的数据，同时让其它 CPU 相关缓存行失效，从而重新从主存中加载最新的数据")]),t._v(" "),e("li",[t._v("不是内存屏障却能完成类似内存屏障的功能，阻止屏障两边的指令重排序")])]),t._v(" "),e("p",[t._v("补充：1 中写了由于效率问题，实际后来的处理器都采用锁缓存来替代锁总线，这种场景下多缓存的数据一致是通过缓存一致性协议来保证的，(具体看缓存一致性)。")]),t._v(" "),e("p",[t._v("这里锁缓存（Cache Locking）就是用了 Ringbus + MESI协议。")]),t._v(" "),e("p",[t._v("MESI大致的意思是：若干个CPU核心通过ringbus连到一起。每个核心都维护自己的Cache的状态。如果对于同一份内存数据在多个核里都有cache，则状态都为S（shared）。")]),t._v(" "),e("p",[t._v("一旦有一核心改了这个数据（状态变成了M），其他核心就能瞬间通过ringbus感知到这个修改，从而把自己的cache状态变成I（Invalid），并且从标记为M的cache中读过来。同时，这个数据会被原子的写回到主存。最终，cache的状态又会变为S。")]),t._v(" "),e("p",[t._v("这相当于给cache本身单独做了一套总线（要不怎么叫ring bus），避免了真的锁总线。")]),t._v(" "),e("p",[t._v("我们可以发现MESIF协议大大降低了读操作的时延,没有让写操作更慢，同时保持了一致性。")]),t._v(" "),e("p",[t._v("但是在多核情况下，就不是这么简单的了。每个cpu都有自己的缓存，每个cpu最终看到的数据，就是不在缓存中的主存+已在缓存中的数据。所以假设多cpu的情况下，某个cpu更新了某个cache line中的值又没有回写到内存中，那么其它cpu中的数据其实已经是旧的已作废的数据，这是不可接受的。")]),t._v(" "),e("p",[t._v("为了解决这种情况，引入了缓存一致性协议，其中用的比较多的称为MESI，分别是cache line可能存在的四种状态：")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("Modified。")]),t._v(" 数据已读入cache line，并且已经被修改过了。该cpu拥有最新的数据，可以直接修改数据。当其它核心需要读取相应数据的时候，此数据必须刷入主存。")]),t._v(" "),e("li",[e("strong",[t._v("Exclusive。")]),t._v(" 数据已读入cache line，并且只有该cpu拥有它。该cpu可以直接修改数据，但是该数据与主存中数据是一致的。")]),t._v(" "),e("li",[e("strong",[t._v("Shared。")]),t._v(" 多个cpu共享某内存的数据，可能由Exclusive状态改变而来，当某个cpu需要修改数据的时候，必须提交 RFO 请求来获取数据的独占权，然后才能进行修改。")]),t._v(" "),e("li",[e("strong",[t._v("Invalid。")]),t._v(" 无效的cache line，和没有载入一样。当某个 cpu 的 cache line 处于- - Shared状态，别的 cpu 申请写的时候，接收了 RFO 请求后会变为此种状态。")])]),t._v(" "),e("p",[t._v("这四种状态可以不断的改变，有了这套协议，不同的 cpu 之间的缓存就可以保证数据的一致性了。但是依赖这套协议，会大大的降低性能，比如一个核心上某个 Shared 的 cache line 打算写，则必须先 RFO  来获取独占权，当其它核心确认了之后才能转为 Exclusive 状态来进行修改，假设其余的核心正在处理别的事情而导致一段时间后才回应，则会当申请 RFO 的核心处于无事可做的状态，这是不可接受的。")]),t._v(" "),e("p",[t._v("于是在每个 cpu 中，又加入了两个类似于缓存的东西，分别称为 Store buffer 与 Invalidate queue。")]),t._v(" "),e("p",[t._v("Store buffer 用于缓存写指令，当  cpu 需要写 cache line 的时候，并不会执行上述的流程，而是将写指令丢入Store buffer，当收到其它核心的RFO回应后，该指令才会真正执行。")]),t._v(" "),e("p",[t._v("Invalidate queue用于缓存Shared->Invalid状态的指令，当cpu收到其它核心的RFO指令后，会将自身对应的cache line无效化，但是当核心比较忙的时候，无法立刻处理，所以引入Invalidate queue，当收到RFO指令后，立刻回应，将无效化的指令投入Invalidate queue。")]),t._v(" "),e("p",[t._v("这套机制大大提升了性能，但是很多操作其实也就异步化了，某个cpu写入了东西，则该写入可能只对当前CPU可见（读缓存机制会先读Store buffer，再读缓存），而其余的cpu可能无法感知到内存发生了改变，即使Invalidate queue中已有该无效化指令。")]),t._v(" "),e("p",[t._v("为了解决这个问题，引入了读写屏障。"),e("em",[t._v("写屏障主要保证在写屏障之前的在Store buffer中的指令都真正的写入了缓存，读屏障主要保证了在读屏障之前所有Invalidate queue中所有的无效化指令都执行")]),t._v("。有了读写屏障的配合，那么在不同的核心上，缓存可以得到强同步。")]),t._v(" "),e("p",[t._v("所以在锁的实现上，一般lock都会加入读屏障，保证后续代码可以读到别的cpu核心上的未回写的缓存数据，而unlock都会加入写屏障，将所有的未回写的缓存进行回写。")]),t._v(" "),e("h4",{attrs:{id:"既然cpu有缓存一致性协议-mesi-为什么-jmm-还需要volatile关键字"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#既然cpu有缓存一致性协议-mesi-为什么-jmm-还需要volatile关键字"}},[t._v("#")]),t._v(" 既然CPU有缓存一致性协议（MESI），为什么 JMM 还需要"),e("a",{attrs:{href:"https://so.csdn.net/so/search?q=volatile&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[t._v("volatile"),e("OutboundLink")],1),t._v("关键字？")]),t._v(" "),e("p",[e("strong",[t._v("MESI 协议最多只是保证了对于一个变量，在多个核上的读写顺序，对于多个变量而言是没有任何保证的。而 volatile  的存在是保证在编译时候的禁止指令的重排")])]),t._v(" "),e("p",[t._v("参考：")]),t._v(" "),e("p",[t._v("https://www.cnblogs.com/xrq730/p/7048693.html")]),t._v(" "),e("p",[t._v("https://mp.weixin.qq.com/s/sSQqHpO85IBLsiBb8kh8AQ")])])}),[],!1,null,null,null);a.default=r.exports}}]);