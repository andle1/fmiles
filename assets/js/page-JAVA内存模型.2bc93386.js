(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{518:function(s,a,t){s.exports=t.p+"assets/img/v2-3d312429710bd6a11eca171858f67751_720w.803f3203.jpg"},519:function(s,a,t){s.exports=t.p+"assets/img/4222138-1cc1cd7e5e09232c.26e94cfb.png"},520:function(s,a,t){s.exports=t.p+"assets/img/{FB5F063F-CE53-F064-1C8B-626B8C12F9CA}.fb5f063f.jpg"},691:function(s,a,t){"use strict";t.r(a);var n=t(1),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p",[s._v("https://www.jianshu.com/p/8a58d8335270")]),s._v(" "),n("h2",{attrs:{id:"java内存模型是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java内存模型是什么"}},[s._v("#")]),s._v(" JAVA内存模型是什么")]),s._v(" "),n("p",[s._v("与单行程序相比，并发程序还必须额外处理一个问题，那就是多线程数据的访问一致性。一旦出现多个线程访问某个变量的值不一致的情况，系统就可能发生一些莫名其妙的问题，因此，在进行多线程程序设计时，必须考徐这种情况。Java 内存模型(JMM) 就是用来解释并规范这种情况的，将这种看似随机的状态变为可控，从而屏蔽多线程间可能引发的种种问题。")]),s._v(" "),n("h5",{attrs:{id:"大致示例图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#大致示例图"}},[s._v("#")]),s._v(" 大致示例图：")]),s._v(" "),n("p",[n("img",{attrs:{src:t(518),alt:"img",loading:"lazy"}})]),s._v(" "),n("h4",{attrs:{id:"jvm-对-java-内存模型的实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jvm-对-java-内存模型的实现"}},[s._v("#")]),s._v(" JVM 对 Java 内存模型的实现")]),s._v(" "),n("p",[s._v("在JVM内部，Java内存模型把内存分成了两部分：线程栈区和堆区。")]),s._v(" "),n("p",[n("img",{attrs:{src:t(519),alt:"img",loading:"lazy"}})]),s._v(" "),n("p",[s._v("![1577451710876](file://C:\\Users\\18496\\Desktop\\linux\\blogs\\java博客\\底层原理\\1577451710876.png?lastModify=1649170185)")]),s._v(" "),n("p",[s._v("volatile 保证立即刷新属性到内存中，但是他不能保证线程安全，只是让所有的线程接收到某个共同的值的变化")]),s._v(" "),n("p",[n("img",{attrs:{src:t(520),alt:"img",loading:"lazy"}})]),s._v(" "),n("h2",{attrs:{id:"内存模型的基本原则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内存模型的基本原则"}},[s._v("#")]),s._v(" 内存模型的基本原则")]),s._v(" "),n("h3",{attrs:{id:"一、原子性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、原子性"}},[s._v("#")]),s._v(" 一、原子性")]),s._v(" "),n("h4",{attrs:{id:"问题描述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#问题描述"}},[s._v("#")]),s._v(" 问题描述：")]),s._v(" "),n("p",[s._v("原子性是指在一次操作或者多次操作中，要么所有的操作全部都得到了执行并且不会受到任何因素的干扰而中断，要么所有的操作都不执行。譬如，对 int 和 byte 等数据的赋值操作就具备基本的原子特性。在32 位操作系统中，对于 long 和 double 的赋值操作，由于这两长度为 64 位，无法一次操作，因此对于它们的操作都不是原子的。")]),s._v(" "),n("h4",{attrs:{id:"解决方案"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解决方案"}},[s._v("#")]),s._v(" 解决方案：")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("volatile + 加锁")])]),s._v(" "),n("li",[n("strong",[s._v("使用原子类")])])]),s._v(" "),n("h3",{attrs:{id:"二、有序性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、有序性"}},[s._v("#")]),s._v(" 二、有序性")]),s._v(" "),n("h4",{attrs:{id:"问题描述-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#问题描述-2"}},[s._v("#")]),s._v(" 问题描述：")]),s._v(" "),n("p",[s._v("现代 CPU 都支持指令流水执行。为了保证流水线的顺畅执行，在指令执行时，有可能会对目标指令进行重排。重排不会导致单线程中的语义修改，但会导致多线程中的语义出现不一致。即，在一个线程中观察另外一个线程的操作，会发现被观察的指令顺序和预期情况不符。")]),s._v(" "),n("h4",{attrs:{id:"解决方案-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解决方案-2"}},[s._v("#")]),s._v(" 解决方案：")]),s._v(" "),n("ul",[n("li",[s._v("解决有序性的一个简单方法就是 synchronized ，从代码执行的角度来说，一个线程 A 进行了指令重排，但是执行以后，线程 B 无法进入只有线程 A 释放锁，线程 B 才得以进入，因此无论线程 A 的指令执行顺序如何，线程 B 都会看到相同的最终结果。")]),s._v(" "),n("li",[n("strong",[s._v("volatile")])])]),s._v(" "),n("p",[s._v("内存屏障，禁止指令重排。（具体原理看 volatitle）")]),s._v(" "),n("h3",{attrs:{id:"三、可见性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、可见性"}},[s._v("#")]),s._v(" 三、可见性")]),s._v(" "),n("h4",{attrs:{id:"_1、问题描述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、问题描述"}},[s._v("#")]),s._v(" 1、问题描述：")]),s._v(" "),n("p",[s._v("指的是当一个线程修改了一个变量的值，在另外一个线程中可以马上得知这个修改。另外，由于系统编译器优化，部分变量的值可能会被寄存器或告诉缓冲 (Cache)缓存，而每个 CPU 都有独立的寄存器和 Cache，从而导致其他线程无法立即发现这个修改。")]),s._v(" "),n("h5",{attrs:{id:"示例代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#示例代码"}},[s._v("#")]),s._v(" 示例代码：")]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("VolatileExample")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * main 方法作为一个主线程\n     */")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyThread")]),s._v(" myThread "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyThread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 开启线程")]),s._v("\n        myThread"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 主线程执行")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("myThread"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("isFlag")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"主线程访问到 flag 变量"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * 子线程类\n */")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyThread")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" flag "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("InterruptedException")]),s._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("printStackTrace")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 修改变量值")]),s._v("\n        flag "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"flag = "')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" flag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("isFlag")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" flag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br")])]),n("p",[s._v("执行上面的程序，你会发现，控制台永远都不会输出 "),n("strong",[s._v("“主线程访问到 flag 变量”")]),s._v(" 这句话。我们可以看到，子线程执行时已经将 flag 设置成 true，但主线程执行时没有读到 flag 的最新值，导致控制台没有输出上面的句子。")]),s._v(" "),n("h4",{attrs:{id:"_2、解决方案"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、解决方案"}},[s._v("#")]),s._v(" 2、解决方案：")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("加锁")])])]),s._v(" "),n("p",[s._v("因为当一个线程进入 synchronized 代码块后，线程获取到锁，会清空本地内存，然后从主内存中拷贝共享变量的最新值到本地内存作为副本，执行代码，又将修改后的副本值刷新到主内存中，最后线程释放锁。")]),s._v(" "),n("p",[s._v("这里除了 synchronized 外，其它锁也能保证变量的内存可见性。")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("volatile")]),s._v("   （具体原理看 volatitle）")])]),s._v(" "),n("p",[s._v("使用 volatile 修饰共享变量后，每个线程要操作变量时会从主内存中将变量拷贝到本地内存作为副本，当线程操作变量副本并写回主内存后，会通过 "),n("strong",[s._v("CPU 总线嗅探机制")]),s._v("告知其他线程该变量副本已经失效，需要重新从主内存中读取。")]),s._v(" "),n("h4",{attrs:{id:"四、happens-before-原则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、happens-before-原则"}},[s._v("#")]),s._v(" 四、Happens-Before 原则")]),s._v(" "),n("p",[s._v("虽然虚拟机和执行系统会指令进行一定的重排，但是指令重排是有原则的，并非所有的指令都可以随意更改执行位置。")]),s._v(" "),n("p",[s._v("happens-before 规则如下：")]),s._v(" "),n("ul",[n("li",[s._v("程序顺序规则：一个线程中的每个操作，happens-before 于该线程中的任意后续操作。")]),s._v(" "),n("li",[s._v("监视器锁规则：对一个监视器锁的解锁，happens-before 于随后对这个监视器锁的加锁。")]),s._v(" "),n("li",[s._v("volatile 变量规则：对一个 volatile 域的写，happens-before 于任意后续对这个 volatile 域的读。")]),s._v(" "),n("li",[s._v("传递性：如果 A happens-before B，且 B happens-before C，那么 A happens-before C。")]),s._v(" "),n("li",[s._v("start() 规则：Thread.start() 的调用会 happens-before 于启动线程里面的动作。")]),s._v(" "),n("li",[s._v("join() 规则：Thread 中的所有动作都 happens-before 于其他线程从 Thread.join() 中成功返回。")])])])}),[],!1,null,null,null);a.default=e.exports}}]);