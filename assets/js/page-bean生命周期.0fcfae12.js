(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{476:function(t,s,n){t.exports=n.p+"assets/img/20200224111702108.646dd98c.png"},477:function(t,s,n){t.exports=n.p+"assets/img/20200224114129481.f49fab36.png"},478:function(t,s,n){t.exports=n.p+"assets/img/20200707132832315.b0f1317f.png"},658:function(t,s,n){"use strict";n.r(s);var a=n(1),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"总体的创建过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总体的创建过程"}},[t._v("#")]),t._v(" 总体的创建过程")]),t._v(" "),a("p",[a("img",{attrs:{src:n(476),alt:"img",loading:"lazy"}})]),t._v(" "),a("p",[t._v("以注解类变成Spring Bean为例，Spring会扫描指定包下面的Java类，然后将其变成beanDefinition对象，然后Spring会根据beanDefinition来创建bean，特别要记住一点，Spring是根据beanDefinition来创建Spring bean的")]),t._v(" "),a("h3",{attrs:{id:"java类-beandefinition对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java类-beandefinition对象"}},[t._v("#")]),t._v(" "),a("strong",[t._v("java类 -> beanDefinition对象")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("refresh")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeansException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IllegalStateException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("startupShutdownMonitor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prepare this context for refreshing.")]),t._v("\n        准备工作包括设置启动时间，是否激活标识位，\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化属性源(property source)配置")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("prepareRefresh")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Tell the subclass to refresh the internal bean factory.")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回一个factory 为什么需要返回一个工厂")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//因为要对工厂进行初始化")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigurableListableBeanFactory")]),t._v(" beanFactory "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("obtainFreshBeanFactory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prepare the bean factory for use in this context.")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//准备工厂")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("prepareBeanFactory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanFactory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Allows post-processing of the bean factory in context subclasses.")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这个方法在当前版本的spring是没用任何代码的")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//可能spring期待在后面的版本中去扩展吧")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("postProcessBeanFactory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanFactory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Invoke factory processors registered as beans in the context.")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//在spring的环境中去执行已经被注册的 factory processors")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//设置执行自定义的ProcessBeanFactory 和spring内部自己定义的")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("invokeBeanFactoryPostProcessors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanFactory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Register bean processors that intercept bean creation.")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//注册beanPostProcessor")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("registerBeanPostProcessors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanFactory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Initialize message source for this context.")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("initMessageSource")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Initialize event multicaster for this context.")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//初始化应用事件广播器")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("initApplicationEventMulticaster")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Initialize other special beans in specific context subclasses.")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onRefresh")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Check for listener beans and register them.")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("registerListeners")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Instantiate all remaining (non-lazy-init) singletons.")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("finishBeanFactoryInitialization")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanFactory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Last step: publish corresponding event.")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("finishRefresh")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeansException")]),t._v(" ex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("logger"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isWarnEnabled")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                logger"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("warn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Exception encountered during context initialization - "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n                            "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cancelling refresh attempt: "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" ex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Destroy already created singletons to avoid dangling resources.")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("destroyBeans")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Reset 'active' flag.")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cancelRefresh")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Propagate exception to caller.")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" ex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Reset common introspection caches in Spring's core, since we")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// might not ever need metadata for singleton beans anymore...")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resetCommonCaches")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br"),a("span",{staticClass:"line-number"},[t._v("34")]),a("br"),a("span",{staticClass:"line-number"},[t._v("35")]),a("br"),a("span",{staticClass:"line-number"},[t._v("36")]),a("br"),a("span",{staticClass:"line-number"},[t._v("37")]),a("br"),a("span",{staticClass:"line-number"},[t._v("38")]),a("br"),a("span",{staticClass:"line-number"},[t._v("39")]),a("br"),a("span",{staticClass:"line-number"},[t._v("40")]),a("br"),a("span",{staticClass:"line-number"},[t._v("41")]),a("br"),a("span",{staticClass:"line-number"},[t._v("42")]),a("br"),a("span",{staticClass:"line-number"},[t._v("43")]),a("br"),a("span",{staticClass:"line-number"},[t._v("44")]),a("br"),a("span",{staticClass:"line-number"},[t._v("45")]),a("br"),a("span",{staticClass:"line-number"},[t._v("46")]),a("br"),a("span",{staticClass:"line-number"},[t._v("47")]),a("br"),a("span",{staticClass:"line-number"},[t._v("48")]),a("br"),a("span",{staticClass:"line-number"},[t._v("49")]),a("br"),a("span",{staticClass:"line-number"},[t._v("50")]),a("br"),a("span",{staticClass:"line-number"},[t._v("51")]),a("br"),a("span",{staticClass:"line-number"},[t._v("52")]),a("br"),a("span",{staticClass:"line-number"},[t._v("53")]),a("br"),a("span",{staticClass:"line-number"},[t._v("54")]),a("br"),a("span",{staticClass:"line-number"},[t._v("55")]),a("br"),a("span",{staticClass:"line-number"},[t._v("56")]),a("br"),a("span",{staticClass:"line-number"},[t._v("57")]),a("br"),a("span",{staticClass:"line-number"},[t._v("58")]),a("br"),a("span",{staticClass:"line-number"},[t._v("59")]),a("br"),a("span",{staticClass:"line-number"},[t._v("60")]),a("br"),a("span",{staticClass:"line-number"},[t._v("61")]),a("br"),a("span",{staticClass:"line-number"},[t._v("62")]),a("br"),a("span",{staticClass:"line-number"},[t._v("63")]),a("br"),a("span",{staticClass:"line-number"},[t._v("64")]),a("br"),a("span",{staticClass:"line-number"},[t._v("65")]),a("br"),a("span",{staticClass:"line-number"},[t._v("66")]),a("br"),a("span",{staticClass:"line-number"},[t._v("67")]),a("br"),a("span",{staticClass:"line-number"},[t._v("68")]),a("br"),a("span",{staticClass:"line-number"},[t._v("69")]),a("br"),a("span",{staticClass:"line-number"},[t._v("70")]),a("br"),a("span",{staticClass:"line-number"},[t._v("71")]),a("br"),a("span",{staticClass:"line-number"},[t._v("72")]),a("br"),a("span",{staticClass:"line-number"},[t._v("73")]),a("br"),a("span",{staticClass:"line-number"},[t._v("74")]),a("br"),a("span",{staticClass:"line-number"},[t._v("75")]),a("br")])]),a("p",[t._v("有关Spring Bean生命周期最主要的方法有三个invokeBeanFactoryPostProcessors、registerBeanPostProcessors和finishBeanFactoryInitialization。")]),t._v(" "),a("p",[t._v("​\t其中invokeBeanFactoryPostProcessors方法会执行BeanFactoryPostProcessors后置处理器及其子接口BeanDefinitionRegistryPostProcessor，执行顺序先是执行BeanDefinitionRegistryPostProcessor接口的postProcessBeanDefinitionRegistry方法，然后执行BeanFactoryPostProcessor接口的postProcessBeanFactory方法。")]),t._v(" "),a("p",[t._v("对于BeanDefinitionRegistryPostProcessor接口的postProcessBeanDefinitionRegistry方法，该步骤会扫描到指定包下面的标有注解的类，然后将其变成BeanDefinition对象，然后放到一个Spring中的Map中，用于下面创建 Spring bean 的时候使用这个BeanDefinition")]),t._v(" "),a("p",[t._v("其中 registerBeanPostProcessors 方法根据实现了 PriorityOrdered、Ordered 接口，排序后注册所有的 BeanPostProcessor 后置处理器，主要用于 Spring Bean 创建时，执行这些后置处理器的方法，这也是 Spring 中提供的扩展点，让我们能够插手 Spring bean 创建过程。")]),t._v(" "),a("p",[a("img",{attrs:{src:n(477),alt:"img",loading:"lazy"}})]),t._v(" "),a("h3",{attrs:{id:"beandefinition对象-spring中的bean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#beandefinition对象-spring中的bean"}},[t._v("#")]),t._v(" "),a("strong",[t._v("beanDefinition对象 -> Spring中的bean")])]),t._v(" "),a("p",[t._v("​    finishBeanFactoryInitialization 是完成非懒加载的 Spring bean 的创建的工作，你要想说 Spring 的生命周期，不要整其他没用的，直接告诉他在该步骤中会有8个后置处理的方法4个后置处理器的类贯穿在对象的实例化、赋值、初始化、和销毁的过程中，这4个后置处理器出现的地方分别为：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/2020072612595369.png",alt:"img",loading:"lazy"}})]),t._v(" "),a("h4",{attrs:{id:"关于每个后置处理的作用如下"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于每个后置处理的作用如下"}},[t._v("#")]),t._v(" 关于每个后置处理的作用如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:n(478),alt:"img",loading:"lazy"}})]),t._v(" "),a("h4",{attrs:{id:"一、instantiationawarebeanpostprocessor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、instantiationawarebeanpostprocessor"}},[t._v("#")]),t._v(" 一、InstantiationAwareBeanPostProcessor")]),t._v(" "),a("p",[t._v("添加实例化前回调的 BeanPostProcessor 子接口，以及实例化后但在设置显式属性或发生自动装配之前的回调。\n通常用于抑制特定目标 bean 的默认实例化，例如创建具有特殊 TargetSources 的代理（池化目标、延迟初始化目标等），或实现额外的注入策略，如字段注入。\n注意：此接口为专用接口，主要供框架内部使用。")]),t._v(" "),a("p",[t._v("Object bean = resolveBeforeInstantiation(beanName, mbdToUse);方法里面执行了这个后置处理器。")]),t._v(" "),a("h4",{attrs:{id:"二、smartinstantiationawarebeanpostprocessor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、smartinstantiationawarebeanpostprocessor"}},[t._v("#")]),t._v(" 二、SmartInstantiationAwareBeanPostProcessor")]),t._v(" "),a("p",[t._v("InstantiationAwareBeanPostProcessor接口的扩展，添加了用于预测已处理 bean 的最终类型的回调。")]),t._v(" "),a("h4",{attrs:{id:"三、mergedbeandefinitionpostprocessor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、mergedbeandefinitionpostprocessor"}},[t._v("#")]),t._v(" 三、MergedBeanDefinitionPostProcessor")]),t._v(" "),a("p",[t._v("BeanDefition 相关")]),t._v(" "),a("h4",{attrs:{id:"四、smartinitializingsingleton"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、smartinitializingsingleton"}},[t._v("#")]),t._v(" 四、SmartInitializingSingleton")]),t._v(" "),a("p",[t._v("智能初始化Singleton，该接口只有一个方法，是在所有的非懒加载单实例bean都成功创建并且放到Spring IOC容器之后进行执行的。")]),t._v(" "),a("h4",{attrs:{id:"下面按照图中的顺序进行说明每个后置处理的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#下面按照图中的顺序进行说明每个后置处理的作用"}},[t._v("#")]),t._v(" 下面按照图中的顺序进行说明每个后置处理的作用：")]),t._v(" "),a("h5",{attrs:{id:"对象实例化之前"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象实例化之前"}},[t._v("#")]),t._v(" 对象实例化之前：")]),t._v(" "),a("h5",{attrs:{id:"_1、instantiationawarebeanpostprocessor-postprocessbeforeinstantiation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、instantiationawarebeanpostprocessor-postprocessbeforeinstantiation"}},[t._v("#")]),t._v(" 1、InstantiationAwareBeanPostProcessor# postProcessBeforeInstantiation")]),t._v(" "),a("p",[t._v("createBean#resolveBeforeInstantiation ；")]),t._v(" "),a("p",[t._v("在目标对象实例化之前调用，方法的返回值类型是 Object，我们可以返回任何类型的值。由于这个时候目标对象还未实例化，所以这个返回值可以用来代替原本该生成的目标对象的实例(一般都是代理对象)。如果该方法的返回值代替原本该生成的目标对象，后续只有postProcessAfterInitialization方法会调用，其它方法不再调用；否则按照正常的流程走")]),t._v(" "),a("h5",{attrs:{id:"_2、smartinstantiationawarebeanpostprocessor-determinecandidateconstructors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、smartinstantiationawarebeanpostprocessor-determinecandidateconstructors"}},[t._v("#")]),t._v(" 2、SmartInstantiationAwareBeanPostProcessor# determineCandidateConstructors")]),t._v(" "),a("p",[t._v("createBean#createBeanInstance#determineConstructorsFromBeanPostProcessors；")]),t._v(" "),a("p",[t._v("实例化之前根据根据参数解析构造函数。允许开发人员自己来判断用哪个构造器。")]),t._v(" "),a("h5",{attrs:{id:"实例化之后-属性填充之前"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例化之后-属性填充之前"}},[t._v("#")]),t._v(" 实例化之后，属性填充之前：")]),t._v(" "),a("h5",{attrs:{id:"_3、mergedbeandefinitionpostprocessor-postprocessmergedbeandefinition"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、mergedbeandefinitionpostprocessor-postprocessmergedbeandefinition"}},[t._v("#")]),t._v(" 3、MergedBeanDefinitionPostProcessor# postProcessMergedBeanDefinition")]),t._v(" "),a("p",[t._v("createBean#applyMergedBeanDefinitionPostProcessors；")]),t._v(" "),a("p",[t._v("允许 post-processors  更改合并的 bean defition")]),t._v(" "),a("h5",{attrs:{id:"_4、smartinstantiationawarebeanpostprocessor-getearlybeanreference"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、smartinstantiationawarebeanpostprocessor-getearlybeanreference"}},[t._v("#")]),t._v(" 4、SmartInstantiationAwareBeanPostProcessor# getEarlyBeanReference")]),t._v(" "),a("p",[t._v("createBean#addSingletonFactory#getEarlyBeanReference")]),t._v(" "),a("p",[t._v("循环引用的后置处理器， 获得提前暴露的bean引用，就是为了解决aop场景下的循环依赖。就是提前暴露需要代理的 bean。")]),t._v(" "),a("h5",{attrs:{id:"_5、instantiationawarebeanpostprocessor-postprocessafterinstantiation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、instantiationawarebeanpostprocessor-postprocessafterinstantiation"}},[t._v("#")]),t._v(" 5、InstantiationAwareBeanPostProcessor# postProcessAfterInstantiation")]),t._v(" "),a("p",[t._v("createBean#populateBean#postProcessAfterInstantiation；")]),t._v(" "),a("p",[t._v("方法在目标对象实例化之后调用，这个时候对象已经被实例化，但是该实例的属性还未被设置，都是 null。如果该方法返回 false，会忽略属性值的设置；如果返回 true，会按照正常流程设置属性值。方法不管 postProcessBeforeInstantiation 方法的返回值是什么都会执行")]),t._v(" "),a("h5",{attrs:{id:"属性填充时"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性填充时"}},[t._v("#")]),t._v(" 属性填充时：")]),t._v(" "),a("h5",{attrs:{id:"_6、instantiationawarebeanpostprocessor-postprocesspropertie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、instantiationawarebeanpostprocessor-postprocesspropertie"}},[t._v("#")]),t._v(" 6、InstantiationAwareBeanPostProcessor# postProcessPropertie")]),t._v(" "),a("p",[t._v("createBean#populateBean#postProcessPropertie；")]),t._v(" "),a("p",[t._v("方法对属性值进行修改(这个时候属性值还未被设置，但是我们可以修改原本该设置进去的属性值)。如果postProcessAfterInstantiation方法返回false，该方法不会被调用。可以在该方法内完成对属性的自动注入。")]),t._v(" "),a("h5",{attrs:{id:"属性赋值之后-初始化之前"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性赋值之后-初始化之前"}},[t._v("#")]),t._v(" 属性赋值之后，初始化之前：")]),t._v(" "),a("h5",{attrs:{id:"_7-beanpostprocessor-postprocessbeforeinitialization"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-beanpostprocessor-postprocessbeforeinitialization"}},[t._v("#")]),t._v(" 7.BeanPostProcessor# postProcessBeforeInitialization")]),t._v(" "),a("p",[t._v("createBean#initializeBean#applyBeanPostProcessorsBeforeInitialization；")]),t._v(" "),a("p",[t._v("该方法会在初始化之前进行执行，其中有一个实现类比较重要 ApplicationContextAwareProcessor，该后置处理的一个作用就是自定义的Bean 实现 ApplicationContextAware 接口时注入  ApplicationContext对象。")]),t._v(" "),a("p",[t._v("简单说就是当一个类实现了这个接口（ApplicationContextAware）之后，这个类就可以方便获得"),a("a",{attrs:{href:"https://so.csdn.net/so/search?q=ApplicationContext&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[t._v("ApplicationContext"),a("OutboundLink")],1),t._v("中的所有bean。换句话说，就是这个类可以直接获取"),a("a",{attrs:{href:"http://lib.csdn.net/base/javaee",target:"_blank",rel:"noopener noreferrer"}},[t._v("spring"),a("OutboundLink")],1),t._v("配置文件中，所有有引用到的bean对象。")]),t._v(" "),a("h5",{attrs:{id:"初始化之后"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化之后"}},[t._v("#")]),t._v(" 初始化之后：")]),t._v(" "),a("p",[a("strong",[t._v("8.BeanPostProcessor# postProcessAfterInitialization")])]),t._v(" "),a("p",[t._v("createBean#initializeBean#applyBeanPostProcessorsAfterInitialization")]),t._v(" "),a("p",[t._v("该后置处理器的执行是在调用init方法后面进行执行，主要是判断该bean是否需要被AOP代理增强，如果需要的话，则会在该步骤返回一个代理对象。")]),t._v(" "),a("h5",{attrs:{id:"_9-smartinitializingsingleton-aftersingletonsinstantiated"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-smartinitializingsingleton-aftersingletonsinstantiated"}},[t._v("#")]),t._v(" 9.SmartInitializingSingleton# afterSingletonsInstantiated")]),t._v(" "),a("p",[t._v("该方法会在所有的非懒加载单实例  bean 都成功创建并且放到Spring IOC容器之后，依次遍历所有的bean，如果当前这个bean是SmartInitializingSingleton 的子类，那么就强转成 SmartInitializingSingleton 类，然后调用SmartInitializingSingleton的afterSingletonsInstantiated  方法。")]),t._v(" "),a("p",[t._v("参考：")]),t._v(" "),a("p",[t._v("https://blog.csdn.net/qq_35634181/article/details/104473308")])])}),[],!1,null,null,null);s.default=e.exports}}]);