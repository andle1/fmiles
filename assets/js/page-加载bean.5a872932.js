(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{660:function(t,a,s){"use strict";s.r(a);var e=s(1),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"bean-加载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bean-加载"}},[t._v("#")]),t._v(" bean 加载")]),t._v(" "),s("h2",{attrs:{id:"factorybean"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#factorybean"}},[t._v("#")]),t._v(" FactoryBean")]),t._v(" "),s("h2",{attrs:{id:"循环依赖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#循环依赖"}},[t._v("#")]),t._v(" 循环依赖")]),t._v(" "),s("h3",{attrs:{id:"_1、构造器循环依赖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、构造器循环依赖"}},[t._v("#")]),t._v(" 1、构造器循环依赖")]),t._v(" "),s("p",[t._v("这种循环依赖是无法解决的，只能抛出 BeanCurrentlyInCreatingExcepetion。因为构造器创建 bean 的时候，会优先去创建依赖的 bean，当存在循环依赖的时候，自己本身会被创建两次，存在问题。")]),t._v(" "),s("p",[t._v("​\t\tSpring 容器将每一个正在创建的 bean 标识符放在一个 “当前创建 bean 池” 中，bean 标识符在创建过程中将一致保持在这个池中，因此如果在创建 bean 过程中发现自己已经在 “当前创建 bean 池” 里时，将抛出 BeanCurrentlyInCreatingExcepetion 异常表示循环依赖。")]),t._v(" "),s("h3",{attrs:{id:"_2、setter-循环依赖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、setter-循环依赖"}},[t._v("#")]),t._v(" 2、setter 循环依赖")]),t._v(" "),s("p",[t._v("​\t\t通过 Spring 容器提前暴露刚完成构造器注入当未完成其他步骤（如 setter 注入）的 bean 来完成的，而且只能解决单例作用域的 bean 循环依赖。通过提前暴露一个单例工厂方法，从而使其他 bean 能引用到该 bean。")]),t._v(" "),s("h3",{attrs:{id:"_3、prototype-范围的依赖处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、prototype-范围的依赖处理"}},[t._v("#")]),t._v(" 3、prototype 范围的依赖处理")]),t._v(" "),s("p",[t._v("用 prototype 作用域 bean，Spring 容器无法完成依赖注入。")]),t._v(" "),s("p",[t._v('对于 “singleton” 作用域 bean，可以通过 "setAllowCircularReferences(false)" 来禁用循环依赖引用。')]),t._v(" "),s("h5",{attrs:{id:"补充"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#补充"}},[t._v("#")]),t._v(" 补充：")]),t._v(" "),s("p",[t._v("这个禁用循环依赖没有配置文件配置方法，只能通过硬编码改变：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassPathXmlA")]),t._v("\tpplicationContext bf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassPathxmlApplicationContext")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aspectTest .xml"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nbf "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAllowBeanDefinitionOverriding")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])])])}),[],!1,null,null,null);a.default=n.exports}}]);