(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{602:function(t,a,s){t.exports=s.p+"assets/img/{5C5B166E-3CCD-655A-3B33-F812B9A3BA91}.5c5b166e.jpg"},603:function(t,a,s){t.exports=s.p+"assets/img/{2BB80CC4-7CFB-F7C5-179A-592D2DD71395}.2bb80cc4.jpg"},604:function(t,a,s){t.exports=s.p+"assets/img/{955F23F4-7EF6-1560-1919-D02BDAD7F737}.955f23f4.jpg"},733:function(t,a,s){"use strict";s.r(a);var o=s(1),p=Object(o.a)({},(function(){var t=this,a=t.$createElement,o=t._self._c||a;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h4",{attrs:{id:"枚举根节点"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#枚举根节点"}},[t._v("#")]),t._v(" 枚举根节点：")]),t._v(" "),o("p",[t._v("​\t\t当执行系统停顿下来后，并不需要一个不漏地检查完所有执行上下文和全局的引用位置，虚拟机应当是有办法直接得知哪些地方存放着对象引用。在 HotSpot 的实现中，是使用一组称为 OopMap 的数据结构来达到这个目的的。")]),t._v(" "),o("h4",{attrs:{id:"安全点"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#安全点"}},[t._v("#")]),t._v(" 安全点：")]),t._v(" "),o("p",[t._v("​\t\t在OopMap 的协助下，HotSpot 可以快速且准确地完成 GC Roots 枚举，但一个很现实的问题随之而来：可能导致引用关系变化，或者说 OopMap 内容变化的指令非常多，如果为每一条指令都生成对应的 OopMap，那将会需要大量的额外空间，这样 GC 的空间成本就将会变得更高。")]),t._v(" "),o("p",[t._v("​\t\t实际上，HotSpot 并没有为每条指令都生成 OopMap，而只是在“特定位置”记录了这些信息，这些位置称为 安全点（Safepoint），即程序执行时并非在所有地方都能停顿下来开始 GC，只有在达到安全点时才能暂停。")]),t._v(" "),o("p",[t._v("Safepoint 的选定既不能太少以至于让 GC 等待时间太长，也不能过于频繁以至于过分增大运行时的负载。所以，安全点的选定基本上是以  “是否具有让程序长时间执行的特征”  为标准进行选定的--因为每条指令执行的时间非常短暂，程序不太可能因为指令流长度太长这个原因而过长时间运行，“长时间执行”的最明显特征就是指令序列复用，例如方法调用、循环跳转、异常跳转等，所以具有这些功能的指令才会产生 SafePoint。")]),t._v(" "),o("p",[t._v("对于 SafePoint 。另一个需要考虑的问题是如何在 GC 发生时让所有线程（这里不包括执行 JNI 调用的线程）都 “跑”到最近的安全点上在停顿下来： 抢占式中断（Preemptive Suspension）和主动式中断（Voluntary Suspension）")]),t._v(" "),o("p",[o("img",{attrs:{src:s(602),alt:"img",loading:"lazy"}})]),t._v(" "),o("h4",{attrs:{id:"安全区域"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#安全区域"}},[t._v("#")]),t._v(" 安全区域：")]),t._v(" "),o("p",[o("img",{attrs:{src:s(603),alt:"img",loading:"lazy"}})]),t._v(" "),o("p",[o("img",{attrs:{src:s(604),alt:"img",loading:"lazy"}})])])}),[],!1,null,null,null);a.default=p.exports}}]);