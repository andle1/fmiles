"use strict";
const path_1 = require("path");
const vuepress_shared_1 = require("@mr-hope/vuepress-shared");
const injectHead_1 = require("./injectHead");
const genManifest_1 = require("./genManifest");
const genServiceWorker_1 = require("./genServiceWorker");
const locales_1 = require("./locales");
const pwaPlugin = (options, context) => {
    const { base } = context;
    const config = {
        name: "pwa",
        define: () => ({
            PWA_LOCALES: (0, vuepress_shared_1.getLocales)(context, locales_1.pwaLocales, options.locales),
            SW_BASE_URL: base || "/",
        }),
        globalUIComponents: [options.popupComponent || "SWUpdatePopup"],
        enhanceAppFiles: (0, path_1.resolve)(__dirname, "../client/enhanceAppFile.js"),
        beforeDevServer(app) {
            app.get(`${base || "/"}manifest.webmanifest`, (_req, res) => {
                (0, genManifest_1.getManifest)(options, context)
                    .then((manifest) => {
                    res.send(manifest);
                })
                    .catch(() => res.status(500).send("Unexpected manifest generate error"));
            });
        },
        ready() {
            context.siteConfig.head = (0, injectHead_1.injectLinkstoHead)(options, base, context.siteConfig.head);
        },
        async generated() {
            await (0, genManifest_1.genManifest)(options, context);
            await (0, genServiceWorker_1.genServiceWorker)(options, context);
        },
    };
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    if (options.showInstall !== false)
        config.globalUIComponents.push("PWAInstall");
    return config;
};
module.exports = pwaPlugin;
//# sourceMappingURL=index.js.map