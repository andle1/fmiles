"use strict";
const path_1 = require("path");
const lineNumbers = require("@vuepress/markdown/lib/lineNumbers");
const code_demo_1 = require("./markdown-it/code-demo");
const decode_url_1 = require("./markdown-it/decode-url");
const flowchart_1 = require("./markdown-it/flowchart");
const footnote_1 = require("./markdown-it/footnote");
const katex_1 = require("./markdown-it/katex");
const lazy_load_1 = require("./markdown-it/lazy-load");
const mark_1 = require("./markdown-it/mark");
const mermaid_1 = require("./markdown-it/mermaid");
const presentation_1 = require("./markdown-it/presentation");
const sub_1 = require("./markdown-it/sub");
const sup_1 = require("./markdown-it/sup");
const tasklist_1 = require("./markdown-it/tasklist");
const pluginConfig_1 = require("./pluginConfig");
const noopModule = "@mr-hope/vuepress-shared/lib/esm/noopModule";
const mdEnhancePlugin = (options, context) => {
    const alignEnable = options.enableAll || options.align || false;
    const containerEnable = options.enableAll || options.container || false;
    const codegroupEnable = options.enableAll || options.codegroup || false;
    const demoEnable = options.enableAll || options.demo || false;
    const flowchartEnable = options.enableAll || options.flowchart || false;
    const footnoteEnable = options.enableAll || options.footnote || false;
    const tasklistEnable = options.enableAll || options.tasklist || false;
    const mermaidEnable = options.enableAll || Boolean(options.mermaid) || false;
    const presentationEnable = options.enableAll || Boolean(options.presentation) || false;
    const texEnable = options.enableAll || Boolean(options.tex) || false;
    const revealPlugins = typeof options.presentation === "object" &&
        Array.isArray(options.presentation.plugins)
        ? options.presentation.plugins
        : [];
    return Object.assign(Object.assign({ name: "md-enhance", alias: {
            "@CodeGroup": codegroupEnable
                ? (0, path_1.resolve)(__dirname, "../client/CodeGroup.vue")
                : noopModule,
            "@CodeGroupItem": codegroupEnable
                ? (0, path_1.resolve)(__dirname, "../client/CodeGroupItem.vue")
                : noopModule,
            "@FlowChart": flowchartEnable
                ? (0, path_1.resolve)(__dirname, "../client/FlowChart.vue")
                : noopModule,
            "@Mermaid": mermaidEnable
                ? (0, path_1.resolve)(__dirname, "../client/Mermaid.js")
                : noopModule,
            "@Presentation": presentationEnable
                ? (0, path_1.resolve)(__dirname, "../client/Presentation.vue")
                : noopModule,
        }, define: () => ({
            MARKDOWN_ENHANCE_ALIGN: alignEnable,
            MARKDOWN_ENHANCE_CONTAINER: containerEnable,
            MARKDOWN_ENHANCE_DELAY: options.delay || 500,
            MARKDOWN_ENHANCE_FOOTNOTE: footnoteEnable,
            MARKDOWN_ENHANCE_TASKLIST: tasklistEnable,
            MARKDOWN_ENHANCE_TEX: texEnable,
            CODE_DEMO_OPTIONS: Object.assign(Object.assign({}, code_demo_1.codeDemoDefaultSetting), (typeof options.demo === "boolean" ? {} : options.demo)),
            MERMAID_OPTIONS: typeof options.mermaid === "object" ? options.mermaid : {},
            REVEAL_CONFIG: typeof options.presentation === "object" &&
                typeof options.presentation.revealConfig === "object"
                ? options.presentation.revealConfig
                : {},
            REVEAL_PLUGIN_HIGHLIGHT: revealPlugins.includes("highlight"),
            REVEAL_PLUGIN_MATH: revealPlugins.includes("math"),
            REVEAL_PLUGIN_NOTES: revealPlugins.includes("notes"),
            REVEAL_PLUGIN_SEARCH: revealPlugins.includes("search"),
            REVEAL_PLUGIN_ZOOM: revealPlugins.includes("zoom"),
        }), enhanceAppFiles: (0, path_1.resolve)(__dirname, "../client/enhanceAppFile.js") }, (demoEnable
        ? {
            clientRootMixin: (0, path_1.resolve)(__dirname, "../client/clientRootMixin.js"),
        }
        : {})), { chainMarkdown: (md) => {
            if (options.lazyLoad !== false)
                md.plugin("lazy-load").use(lazy_load_1.lazyLoad);
            if (options.lineNumbers !== false)
                md.plugin("line-numbers").use(lineNumbers);
            if (options.imageFix !== false)
                md.plugin("decode-url").use(decode_url_1.decodeURL);
            if (options.sup || options.enableAll)
                md.plugin("sup").use(sup_1.default);
            if (options.sub || options.enableAll)
                md.plugin("sub").use(sub_1.default);
            if (footnoteEnable)
                md.plugin("footnote").use(footnote_1.default);
            if (flowchartEnable)
                md.plugin("flowchart").use(flowchart_1.default);
            if (options.mark || options.enableAll)
                md.plugin("mark").use(mark_1.default);
            if (tasklistEnable)
                md.plugin("tasklist").use(tasklist_1.default, [
                    typeof options.tasklist === "object" ? options.tasklist : {},
                ]);
            if (mermaidEnable)
                md.plugin("mermaid").use(mermaid_1.default);
            if (texEnable)
                md.plugin("katex").use(katex_1.default, [
                    Object.assign({ macros: {
                            // support more symbols
                            "\\liiiint": "\\int\\!\\!\\!\\iiint",
                            "\\iiiint": "\\int\\!\\!\\!\\!\\iiint",
                            "\\idotsint": "\\int\\!\\cdots\\!\\int",
                        } }, (typeof options.tex === "object" ? options.tex : {})),
                ]);
            if (presentationEnable)
                md.plugin("presentation").use(presentation_1.default);
        }, plugins: (0, pluginConfig_1.getPluginConfig)(options, context) });
};
module.exports = mdEnhancePlugin;
//# sourceMappingURL=index.js.map